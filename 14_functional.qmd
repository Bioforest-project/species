```{r set}
#| message: false
#| include: false
library(tidyverse)
library(BIOMASS)
library(knitr)
library(bayesplot)
library(sjPlot)
library(corrplot)
library(ggfortify)
version <- 5
taxonomy_file <- file.path("outputs", paste0("taxonomy_v", version, ".tsv"))
traits_file <- file.path("outputs", paste0("traits_v", version, ".tsv"))
```

# Functional {.unnumbered}

We used cleaned taxonomy to retrieve data from TRY [@kattge2019] and BIOMASS [@réjou-méchain2017]. This corresponds to **version 5**.

## Wood density

Using BIOMASS [@réjou-méchain2017], we retrieved wood density for most species, with little differences between sites means.

```{r wd}
#| message: false
#| warning: false
#| fig-cap: "Wood density extracted from @réjou-méchain2017."
taxo <- read_tsv(taxonomy_file)
wd <- getWoodDensity(taxo$genus_cleaned, taxo$species_cleaned) %>%
  group_by(genus, species) %>%
  summarise(wd = mean(meanWD)) %>%
  na.omit() %>%
  rename(genus_cleaned = genus, species_cleaned = species)
taxo_wd <- left_join(taxo, wd)
g1 <- ggplot(taxo_wd, aes(wd, col = site)) +
  geom_density() +
  theme_bw() +
  xlab(expression("Wood Density [" ~ g / cm^3 ~ "]")) +
  theme(legend.key.size = unit(.5, "line"))
g2 <- ggplot(taxo_wd, aes(site, wd, col = site)) +
  geom_violin() +
  geom_boxplot(width = .2) +
  coord_flip() +
  theme_bw() +
  theme(
    legend.position = "none",
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank()
  ) +
  ylab(expression("Wood Density [" ~ g / cm^3 ~ "]"))
cowplot::plot_grid(g1, g2, nrow = 2)
```

## TRY

In order to make a request for data on TRY [@kattge2019], we first retrieved the total species list available from TRY and matched our species to their species list to obtain corresponding species ID on TRY. By chance TRY is also using WordFlora reference. But they limit the requests to 200 species. We thus retrieved available species data by batch of 200 (see example below).

```{r try_sp}
#| eval: false
try_sp <- read_tsv(taxonomy_file) %>%
  select(scientific_cleaned) %>%
  na.omit() %>%
  unique() %>%
  left_join(read_tsv("data/raw_data/TryAccSpecies.txt"),
    by = c("scientific_cleaned" = "AccSpeciesName")
  )
sp_req <- try_sp %>%
  select(AccSpeciesID) %>%
  na.omit() %>%
  unique() %>%
  arrange() %>%
  mutate(request = rep(1:100, each = 200)[seq_len(n())]) %>%
  group_by(request) %>%
  summarise(species_list = paste0(AccSpeciesID, collapse = ", "))
write_tsv(sp_req, "data/derived_data/try_species_requests.tsv")
```

```{r try_req}
#| message: false
#| warning: false
read_tsv("data/derived_data/try_species_requests.tsv", n_max = 1) %>%
  kable(caption = "Example of species ID list for TRY Data Explorer requests (limited to 200) for the first chunk.") # nolint
```

Next we could investigate trait data available for more than 40% of species, which were not many.

```{r try_sp_traits}
#| message: false
#| warning: false
#| fig-cap: "Traits available for at least 50% of species available on TRY."
list.files("data/derived_data/try_req/", full.names = TRUE) %>%
  lapply(read_tsv, skip = 3) %>%
  lapply(gather, species, N, -Trait, -TraitID) %>%
  bind_rows() %>%
  filter(N > 0) %>%
  group_by(Trait, TraitID) %>%
  summarise(N = n()) %>%
  filter(N > 0.4 * 1901) %>%
  ggplot(aes(fct_rev(fct_infreq(Trait, N)), N)) +
  geom_point() +
  theme_bw() +
  coord_flip() +
  theme(axis.title = element_blank())
```

For the first test we thus used:

-   14: Leaf nitrogen (N) content per leaf dry mass, mg/g
-   3117: Leaf area per leaf dry mass (specific leaf area, SLA or 1/LMA): undefined if petiole is in- or excluded, mm2 mg-1
-   4: Stem specific density (SSD, stem dry mass per stem fresh volume) or wood density, g/cm3
-   3114: Leaf area (in case of compound leaves: leaflet, undefined if petiole is in- or excluded), mm2

> The request takes times to be ready. Moreover, we should try to minimise the number of requests. This was a first test. But future tests should be discussed before.

```{r tryrel}
#| message: false
#| warning: false
#| eval: false
taxo <- read_tsv(taxonomy_file)
traits <- c(
  "Stem specific density (SSD, stem dry mass per stem fresh volume) or wood density", # nolint
  "Leaf area per leaf dry mass (specific leaf area, SLA or 1/LMA): undefined if petiole is in- or excluded", # nolint
  "Leaf nitrogen (N) content per leaf dry mass",
  "Leaf area (in case of compound leaves undefined if leaf or leaflet, undefined if petiole is in- or excluded)" # nolint
)
try <- read_tsv("data/raw_data/try/38775.txt") %>%
  filter(TraitName %in% traits) %>%
  filter(AccSpeciesName %in% taxo$scientific_cleaned) %>%
  select(AccSpeciesName, TraitName, StdValue) %>%
  rename(
    species = AccSpeciesName,
    trait = TraitName,
    value = StdValue
  ) %>%
  mutate(trait = recode(trait,
    "Stem specific density (SSD, stem dry mass per stem fresh volume) or wood density" = "wd", # nolint
    "Leaf area per leaf dry mass (specific leaf area, SLA or 1/LMA): undefined if petiole is in- or excluded" = "sla", # nolint
    "Leaf nitrogen (N) content per leaf dry mass" = "n",
    "Leaf area (in case of compound leaves undefined if leaf or leaflet, undefined if petiole is in- or excluded)" = "la" # nolint
  )) %>%
  group_by(species, trait) %>%
  summarise(value = mean(as.numeric(value), na.rm = TRUE)) %>%
  pivot_wider(values_from = "value", names_from = "trait")
write_tsv(try, "data/derived_data/try_extract.tsv")
```

```{r taxo_try}
#| message: false
#| warning: false
try <- read_tsv("data/derived_data/try_extract.tsv") %>%
  rename(scientific_cleaned = species) %>%
  rename(wd_try = wd)
taxo <- read_tsv(taxonomy_file)
taxo_try <- left_join(taxo, try)
```

We obtained numerous data across species for SLA, WD, and N:

```{r trywd}
#| message: false
#| warning: false
#| fig-cap: "Wood density extracted from @kattge2019."
g1 <- ggplot(taxo_try, aes(wd_try, col = site)) +
  geom_density() +
  theme_bw() +
  xlab(expression("Wood Density [" ~ g / cm^3 ~ "]")) +
  theme(legend.key.size = unit(.5, "line"))
g2 <- ggplot(taxo_try, aes(site, wd_try, col = site)) +
  geom_violin() +
  geom_boxplot(width = .2) +
  coord_flip() +
  theme_bw() +
  theme(
    legend.position = "none",
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank()
  ) +
  ylab(expression("Wood Density [" ~ g / cm^3 ~ "]"))
cowplot::plot_grid(g1, g2, nrow = 2)
```

```{r trysla}
#| message: false
#| warning: false
#| fig-cap: "Specific leaf area extracted from @kattge2019."
g1 <- ggplot(taxo_try, aes(sla, col = site)) +
  geom_density() +
  theme_bw() +
  xlab(expression("Specific Leaf Area [" ~ mm^2 ~ mg^{
    -1
  } ~ "]")) +
  scale_x_log10() +
  theme(legend.key.size = unit(.5, "line"))
g2 <- ggplot(taxo_try, aes(site, sla, col = site)) +
  geom_violin() +
  geom_boxplot(width = .2) +
  coord_flip() +
  theme_bw() +
  theme(
    legend.position = "none",
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank()
  ) +
  ylab(expression("Specific Leaf Area [" ~ mm^2 ~ mg^{
    -1
  } ~ "]")) +
  scale_y_log10()
cowplot::plot_grid(g1, g2, nrow = 2)
```

```{r tryla}
#| message: false
#| warning: false
#| fig-cap: "Leaf area extracted from @kattge2019."
g1 <- ggplot(taxo_try, aes(la, col = site)) +
  geom_density() +
  theme_bw() +
  xlab(expression("Leaf Area [" ~ mm^2 ~ "]")) +
  scale_x_log10() +
  theme(legend.key.size = unit(.5, "line"))
g2 <- ggplot(taxo_try, aes(site, la, col = site)) +
  geom_violin() +
  geom_boxplot(width = .2) +
  coord_flip() +
  theme_bw() +
  theme(
    legend.position = "none",
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank()
  ) +
  ylab(expression("Leaf Area [" ~ mm^2 ~ "]")) +
  scale_y_log10()
cowplot::plot_grid(g1, g2, nrow = 2)
```

```{r tryn}
#| message: false
#| warning: false
#| fig-cap: "Leaf nitrogen extracted from @kattge2019."
g1 <- ggplot(taxo_try, aes(n, col = site)) +
  geom_density() +
  theme_bw() +
  xlab(expression("Nitrogen [" ~ mg / g ~ "]")) +
  theme(legend.key.size = unit(.5, "line"))
g2 <- ggplot(taxo_try, aes(site, n, col = site)) +
  geom_violin() +
  geom_boxplot(width = .2) +
  coord_flip() +
  theme_bw() +
  theme(
    legend.position = "none",
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank()
  ) +
  ylab(expression("Nitrogen [" ~ mg / g ~ "]"))
cowplot::plot_grid(g1, g2, nrow = 2)
```

## All raw

We assembled all traits data from TRY [@kattge2019], BIOMASS [@réjou-méchain2017], and TALLO [@jucker2022], and obtained the following correlations:

```{r all_traits}
#| warning: false
#| message: false
#| fig-cap: Species traits pairwise correlations.
taxo_traits <- taxo %>%
  left_join(wd) %>%
  left_join(try)
```

```{r traitcount}
taxo_traits %>%
  select(site, scientific_cleaned, wd, la, sla, n, wd_try) %>%
  gather(trait, value, -site, -scientific_cleaned) %>%
  na.omit() %>%
  group_by(site, trait, scientific_cleaned) %>%
  summarise(mean = mean(value)) %>%
  group_by(site, trait) %>%
  summarise(n = n()) %>%
  pivot_wider(names_from = trait, values_from = n) %>%
  kable()
```

```{r traitcor}
taxo_traits %>%
  select(wd, wd_try, sla, la, n) %>%
  cor(use = "pairwise.complete.obs") %>%
  corrplot::corrplot(type = "upper", diag = FALSE)
```

## All imputed

We used missing data imputation with random forest for with the `missForest` R package to further impute missing trait values [@Gendre2024]. We first aggregated data at the genus level with median trait value to inform genus lacking traits data or species. We obtained for imputation a normalised root mean square error of NRMSE=1.03. We obtained the global PCA below showed globally and per site.

```{r missForest}
#| eval: false
raw <- taxo_traits %>%
  filter(!is.na(genus_cleaned)) %>%
  select(genus_cleaned, wd, sla, la, n) %>%
  group_by(genus_cleaned) %>%
  summarise_all(median, na.rm = TRUE) %>%
  filter(!(is.na(wd) & is.na(sla) & is.na(la) & is.na(n)))
imputation <- missForest::missForest(
  raw %>%
    select(-genus_cleaned) %>%
    as.data.frame(),
  verbose = TRUE
)
imputation$OOBerror
imputation$ximp %>%
  mutate(genus_cleaned = raw$genus_cleaned, .before = 1) %>%
  write_tsv("data/derived_data/imputed_traits.tsv")
```

```{r pca}
#| message: false
#| warning: false
#| fig-cap: Imputed traits global principal component analysis.
imputed <- read_tsv("data/derived_data/imputed_traits.tsv")
autoplot(
  princomp(select(imputed, wd, sla, la, n) %>%
    mutate(sla = log(sla), la = log(la)), cor = TRUE),
  data = imputed, alpha = 0.25, col = "lightgrey",
  loadings.label.size = 6,
  loadings.label.colour = "red", loadings.label.vjust = 1.1,
  loadings.label.repel = TRUE,
  loadings = TRUE, loadings.label = TRUE, loadings.colour = "red"
) +
  coord_equal() +
  geom_hline(aes(yintercept = 0), col = "black", linetype = "dotted") +
  geom_vline(aes(xintercept = 0), col = "black", linetype = "dotted") +
  theme_bw() +
  geom_density_2d_filled(alpha = .5) +
  theme(legend.position = "none")
```

## Traits data

All traits data are saved in `outputs/traits_vX.tsv` with the following columns:

-   scientific_cleaned: the cleaned scientific name for junction with the taxonomic data
-   trait: the trait acronym or code
-   species_trait_value_raw: the species median trait raw value from TRY
-   genus_trait_value_imputed: the genus median trait imputed value in case of missing raw values
-   definition: the trait definition
-   unit: the trait unit

```{r traits_save}
#| message: false
#| warning: false
all_traits <- taxo_traits %>%
  select(scientific_cleaned, genus_cleaned, wd, sla, la, n) %>%
  gather(
    trait, species_trait_value_raw,
    -scientific_cleaned, -genus_cleaned
  ) %>%
  filter(!is.na(scientific_cleaned)) %>%
  unique() %>%
  left_join(imputed %>%
    select(genus_cleaned, wd, sla, la, n) %>%
    gather(trait, genus_trait_value_imputed, -genus_cleaned)) %>%
  mutate(trait = recode(trait,
    "wd" = "WD", "sla" = "SLA",
    "la" = "LA", "n" = "N"
  )) %>%
  mutate(definition = recode(trait,
    "WD" = "Stem specific wood density",
    "SLA" = "Specific leaf area",
    "LA" = "Leaf area",
    "N" = "Leaf nitrogen content per leaf dry mass",
    "hmax" = "Asymptotic height"
  )) %>%
  mutate(unit = recode(trait,
    "WD" = "g cm-3",
    "SLA" = "mm2 mg-1",
    "LA" = "mm2",
    "N" = "mg g-1",
    "hmax" = "m"
  ))
write_tsv(all_traits, traits_file)
```

```{r check_match}
#| eval: false
traits <- read_tsv(traits_file)
taxo <- read_tsv(taxonomy_file)
taxo %>%
  filter(
    !is.na(scientific_cleaned),
    !is.na(species_cleaned)
  ) %>%
  select(scientific_cleaned) %>%
  unique() %>%
  mutate(trait = scientific_cleaned %in% traits$scientific_cleaned) %>%
  filter(!trait)
```
